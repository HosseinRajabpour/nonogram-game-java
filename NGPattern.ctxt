#BlueJ class context
comment0.target=NGPattern
comment0.text=\r\n\ A\ pattern\ for\ a\ cell\ constraint\ (either\ row\ or\ column)\ in\ a\ Nonogram\ puzzle.\r\n\r\n\ @author\ Dr\ Mark\ C.\ Sinclair\r\n\ @version\ September\ 2022\r\n
comment1.params=nums\ maxLen
comment1.target=NGPattern(int[],\ int)
comment1.text=\r\n\ Constructor\r\n\r\n\ @param\ nums\ \ \ the\ pattern\ of\ contiguous\ full\ cells\ as\ an\ integer\ array\r\n\ @param\ maxLen\ the\ maximum\ allowed\ length\ of\ the\ pattern\r\n
comment10.params=
comment10.target=void\ compileRegExSolved()
comment10.text=\r\n\ Compile\ and\ cache\ the\ solution\ regular\ expression\r\n
comment11.params=seq
comment11.target=boolean\ isValid(java.lang.String)
comment11.text=\r\n\ Check\ if\ a\ cell\ state\ sequence\ (of\ maxLen)\ is\ valid\ for\ the\ pattern\r\n\r\n\ @param\ seq\ a\ sequence\ of\ maxLen\ cell\ states\r\n\ @return\ true\ if\ the\ sequence\ is\ valid,\ otherwise\ false\r\n
comment12.params=seq
comment12.target=boolean\ isSolved(java.lang.String)
comment12.text=\r\n\ Check\ if\ a\ cell\ state\ sequence\ (of\ maxLen)\ solves\ the\ pattern\r\n\r\n\ @param\ seq\ a\ sequence\ of\ maxLen\ cell\ states\r\n\ @return\ true\ if\ the\ sequence\ is\ a\ solution,\ otherwise\ false\r\n
comment13.params=
comment13.target=java.lang.String\ toString()
comment13.text=\r\n\ String\ representation\ of\ the\ pattern\ (the\ array\ of\ the\ numbers\ of\ contiguous\ full\ cells\ as\ a\ string)\r\n\r\n\ @return\ the\ string\ representation\r\n
comment14.params=
comment14.target=java.lang.String\ toStringForNon()
comment14.text=\r\n\ String\ representation\ of\ the\ pattern\ (the\ array\ of\ the\ numbers\ of\ contiguous\ full\ cells\ as\ a\ string)\ in\ a\ form\ suitable\ for\ a\ .non\ file\r\n\r\n\ @return\ the\ string\ representation\r\n
comment15.params=
comment15.target=java.lang.String\ toStringFull()
comment15.text=\r\n\ String\ representation\ of\ the\ pattern\ (useful\ for\ debugging)\r\n\r\n\ @return\ the\ string\ representation\r\n
comment2.params=nums
comment2.target=boolean\ checkNums(int[])
comment2.text=\r\n\ Checks\ if\ an\ integer\ array\ could\ represent\ a\ pattern\ of\ the\ numbers\ of\ contiguous\ full\ cells\ in\ a\ nonogram\ row/column\r\n\r\n\ @return\ true\ if\ passes\ the\ check,\ otherwise\ false\r\n
comment3.params=nums
comment3.target=int\ calcMinLen(int[])
comment3.text=\r\n\ Calculate\ the\ minimum\ length\ (number\ of\ cells)\ that\ an\ integer\ array\ representing\ a\ pattern\ of\ the\ numbers\ of\ contiguous\r\n\ full\ cells\ in\ a\ nonogram\ row/column\ could\ occupy\r\n\r\n\ @param\ nums\ a\ pattern\ of\ contiguous\ full\ cells\ as\ an\ integer\ array\r\n\ @return\ the\ minimum\ length\ (number\ of\ cells)\r\n
comment4.params=
comment4.target=int\ getMinLen()
comment4.text=\r\n\ Retrieve\ the\ minimum\ number\ of\ cells\ this\ pattern\ can\ represent\r\n\r\n\ @return\ the\ minimum\ length\ (number\ of\ cells)\r\n
comment5.params=
comment5.target=int\ getMaxLen()
comment5.text=\r\n\ Retrieve\ the\ maximum\ number\ of\ cells\ it\ has\ been\ decided\ this\ pattern\ can\ represent\r\n\r\n\ @return\ the\ maximum\ length\ (number\ of\ cells)\r\n
comment6.params=
comment6.target=int[]\ getNums()
comment6.text=\r\n\ Retrieve\ the\ pattern\ of\ contiguous\ full\ cells\ as\ an\ integer\ array\r\n\r\n\ @return\ the\ integer\ array\ representation\r\n
comment7.params=
comment7.target=java.lang.String\ getRegExValid()
comment7.text=\r\n\ Retrieve\ a\ regular\ expression\ that\ can\ be\ used\ to\ check\ a\ cell\ sequence\ for\ validity\r\n\r\n\ @return\ the\ validity\ regular\ expression\ as\ a\ string\r\n
comment8.params=
comment8.target=java.lang.String\ getRegExSolved()
comment8.text=\r\n\ Retrieve\ a\ regular\ expression\ that\ can\ be\ used\ to\ check\ if\ a\ cell\ sequence\ solves\ the\ pattern\r\n\r\n\ @return\ the\ solution\ regular\ expression\ as\ a\ string\r\n
comment9.params=
comment9.target=void\ compileRegExValid()
comment9.text=\r\n\ Compile\ and\ cache\ the\ validity\ regular\ expression\r\n
numComments=16
